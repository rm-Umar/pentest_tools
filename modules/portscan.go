package modules

import (
	"fmt"
	"net"
	"sync"
	"time"
)

var COMMON_PORTS = []uint16{
	5601, 9300, 80, 23, 443, 21, 22, 25, 3389, 110, 445, 139, 143, 53, 135, 3306, 8080, 1723, 111,
	995, 993, 5900, 1025, 587, 8888, 199, 1720, 465, 548, 113, 81, 6001, 10000, 514, 5060, 179,
	1026, 2000, 8443, 8000, 32768, 554, 26, 1433, 49152, 2001, 515, 8008, 49154, 1027, 5666, 646,
	5000, 5631, 631, 49153, 8081, 2049, 88, 79, 5800, 106, 2121, 1110, 49155, 6000, 513, 990, 5357,
	427, 49156, 543, 544, 5101, 144, 7, 389, 8009, 3128, 444, 9999, 5009, 7070, 5190, 3000, 5432,
	1900, 3986, 13, 1029, 9, 5051, 6646, 49157, 1028, 873, 1755, 2717, 4899, 9100, 119, 37, 1000,
	3001, 5001, 82, 10010, 1030, 9090, 2107, 1024, 2103, 6004, 1801, 5050, 19, 8031, 1041, 255,
}

func ScanPorts(address string) []uint16 {
	result := make(chan uint16)
	var wg sync.WaitGroup

	for _, port := range COMMON_PORTS {
		wg.Add(1)
		go func(p uint16) {
			defer wg.Done()
			if scanPort(address, p) {
				result <- p
			}
		}(port)
	}

	go func() {
		wg.Wait()
		close(result)
	}()

	openPorts := []uint16{}
	for port := range result {
		openPorts = append(openPorts, port)
	}

	return openPorts
}

func scanPort(address string, port uint16) bool {
	conn, err := net.DialTimeout("tcp", fmt.Sprintf("%s:%d", address, port), 1*time.Second)
	if err != nil {
		return false
	}
	defer conn.Close()
	return true
}
